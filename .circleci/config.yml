version: 2.1

orbs:
  slack: circleci/slack@4.1
  #aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7} 
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force 
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  
  install-awscli:
    description: To Install AWS-CLI.
    steps:
      - run:
          name: Install AWS-CLI 
          command: |
            sudo apt update -y
            sudo apt install curl -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            sudo apt install unzip -y
            unzip awscliv2.zip
            sudo ./aws/install

  install-ansible:
    description: To insatll Ansible.
    steps:
      - run:
          name: install Ansible
          command: |
            sudo apt update -y
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible -y
            sudo apt install ansible -y

  install-python:
    description: To install Python
    steps:
      - run:
          name: Install Python
          command: |
            sudo apt update -y
            sudo apt install software-properties-common -y
            sudo add-apt-repository ppa:deadsnakes/ppa -y
            # sudo apt update -y
            sudo apt install python3.8 -y

  install-nodejs:
    description: To install nodejs
    steps:
      - run:
          name: Install nodejs
          command: |
            sudo apt update -y
            sudo apt install nodejs -y
           

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            sudo apt install curl
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -insecure https://kvdb.io/${key_kvdb}/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  test-frontend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: run frontend test
          command: | 
            cd frontend
            npm install
            npm run test
      - slack/notify:
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
                
  test-backend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: run backend test
          command: | 
            cd backend
            npm install
            npm run test
      - slack/notify:
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
            
  scan-backend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: run backend scan
          command: | 
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
            
  scan-frontend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: run frontend scan
          command: | 
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1           

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --region us-east-1 \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy_environment      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      # - image: python:3.7-alpine3.11
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - install-ansible
      - install-awscli
      # Add ssh keys with fingerprint
      - add_ssh_keys:
            fingerprints: ["0e:5d:2c:e3:9d:bc:70:fc:9e:00:c3:b4:fc:57:3f:2c"]
      # attach workspace
      - attach_workspace:
          at: ~/
      # - run:
      #     name: Install ansible/dependencies
      #     command: |
      #       apk add --upgrade bash ansible openssh-client unzip curl 
      #       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #       unzip awscliv2.zip
      #       ./aws/install

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            
      - destroy_environment      
      

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install-awscli
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run and save the migration evidance
          command: |
            cd backend         
            pwd
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
            
      - run:
          name: Send migration status to 3rd party (kvdb.io)
          command: |
            pwd   
            #if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt
      
            if grep -q "No migrations are pending" ~/project/backend/migrations_dump.txt
            then
              echo ${CIRCLE_WORKFLOW_ID:0:7}
              curl https://kvdb.io/${key_kvdb}/migration_"${CIRCLE_WORKFLOW_ID:0:7}" -d "1"
            fi
   
      - revert-migrations
      - destroy_environment      

  deploy-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install-awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
              sleep 130 
              cd frontend
              npm install
      - run:
          name: Get backend url
          command: |
              
              export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
              
              pwd
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL=${API_URL}"
              echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
              cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
              cd frontend
              npm install
              npm run build
              tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      
      - revert-migrations
      - destroy_environment  

  deploy-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install-awscli
      - install-python
      - install-ansible
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints: ["0e:5d:2c:e3:9d:bc:70:fc:9e:00:c3:b4:fc:57:3f:2c"]

      - run:
          name: Package backend
          command: |
              cd backend
              npm install
              npm run build      
              cd ..
              tar -C backend -czvf artifact.tar.gz .
              cp artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |

              export TYPEORM_MIGRATIONS_DIR=./migrations
              export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
              export TYPEORM_MIGRATIONS=./migrations/*{.ts,.js}

              cd .circleci/ansible
              echo "Contents  of the inventory.txt file is -------"
              cat inventory.txt
              ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations
      - destroy_environment

  smoke-test:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install-awscli
      - run:
          name: BACKEND smoke test. 
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            if curl -s $API_URL/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
 
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com
            echo $FRONTEND_WEBSITE
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi

      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy_environment

  cloudfront-update:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install-awscli
      - run:
          name: Fetch and save the Old workflow ID
          command: |
            export OldWorkflowID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            curl https://kvdb.io/${key_kvdb}/OldWorkflowID -d "${OldWorkflowID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

      - revert-migrations
      - destroy_environment

  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-awscli
      # - install-nodejs
      - run:
          name: featch the old stack workflow id
          command: |
              export OldWorkflowID=$(curl --insecure https://kvdb.io/${key_kvdb}/OldWorkflowID) 
              echo OldWorkflowID: $OldWorkflowID
      - run:
          name: Remove old stacks and files
          command: |
              aws s3 rb "s3://udapeople-${OldWorkflowID}" --force
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"


workflows:
  default:
    jobs:
      - build-frontend:
          context: 
            - SLACK_ACCESS_TOKEN
      - build-backend:
          context:
            - SLACK_ACCESS_TOKEN
      - test-frontend:
          requires: [build-frontend]
          context:
            - SLACK_ACCESS_TOKEN
      - test-backend:
          requires: [build-backend]
          context:
            - SLACK_ACCESS_TOKEN
      - scan-backend:
          requires: [build-backend]
          context: 
            - SLACK_ACCESS_TOKEN
      - scan-frontend:
          requires: [build-frontend]
          context: 
            - SLACK_ACCESS_TOKEN
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [initial]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]